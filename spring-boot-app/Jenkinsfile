pipeline {
    agent {
        docker { 
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
         }
    }

    stages {
        // stage('Clean Workspace') {
        //     steps {
        //         cleanWs()
        //     }
        // }
        // stage('Checkout Source Code') {
        //     steps {
        //         git branch: 'main', changelog: false, credentialsId: 'gitHubToken', poll: false, url: 'https://github.com/DevOps24-Ashutosh/Java_SpringBoot_CICD.git'
        //     }
        // }
        stage('Debug Workspace') {
            steps {
                sh 'echo "Container workspace:"'
                sh 'pwd'
                sh 'ls -la'
                sh 'echo "Creating a test file"'
                sh 'touch test_file.txt'
                sh 'echo "Updated container workspace:"'
                sh 'ls -la'
            }
        }
        stage('Build and Test') {
            steps {
                sh "cd spring-boot-app/ && mvn clean package" 
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.110.179.157:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SonarQube_Auth_Token')]) {
                    sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SonarQube_Auth_Token -Dsonar.host.url=${SONAR_URL}'
                } 
            }
        }
        stage("Build and Push docker Image to DockerHub") {
            environment {
                Docker_Image = "ashuto91/javaspringboot:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                registryCredential = 'dockerHubCred'
            }
            steps {
                // withCredentials([usernamePassword(credentialsId: 'dockerHubCred', passwordVariable: 'DockerHub-Password', usernameVariable: 'DockerHub-Username')]) {
                //     sh 'docker login -u $DockerHub-Username -p $DockerHub-Password --password-stdin'   
                // }
                sh '''
                echo "Building Docker Image from the Repos Dockerfile"
                docker build -t ${Docker_Image} spring-boot-app/
                '''
                script {
                    docker.withRegistry('', registryCredential) {
                        sh '''
                        echo "Pushing the docker Image built in previous step is being push to docker hub"
                        docker push ${Docker_Image}
                        '''
                    }
                }
                // sh '''
                // echo "Pushing the docker Image built in previous Images is being push to docker hub"
                // docker push ashuto91/pytodo:${BUILD_NUMBER}
                // '''
            }
        }
        stage("Removing the previous Build Image") {
            steps {
                sh '''
                echo "Removing the previous built image"
                docker rmi ashuto91/javaspringboot:${BUILD_NUMBER}
                '''
            }
        }
        stage("Updating the k8 manifest") {
            steps {
                script {
                    sh '''
                    git pull origin main
                    BUILD_NUMBER=${BUILD_NUMBER}
                    cd spring-boot-app-manifests
                    sed -i "s|image:.*|image: ashuto91/javaspringboot:${BUILD_NUMBER}|g" deployment.yml
                    git add deployment.yml
                    git commit -m "Update Docker Build image number $BUILD_NUMBER"
                    '''
                    withCredentials([gitUsernamePassword(credentialsId: 'gitHubToken', gitToolName: 'Default')]) {
                        sh "git push origin HEAD:main"
                    }
                }
            }
        }
    }
}